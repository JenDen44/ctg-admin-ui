name: Codex Comment-Triggered PR-wide Review

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    # –õ—é–±–æ–π –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤–Ω—É—Ç—Ä–∏ PR, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π '@codex'
    if: >
      github.event.issue.pull_request != null &&
      contains(github.event.comment.body, '@codex')
    runs-on: ubuntu-latest

    env:
      OPENAI_MODEL: gpt-4.1-mini

    steps:
      - name: Context
        run: |
          echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "COMMENT_URL=${{ github.event.comment.html_url }}" >> $GITHUB_ENV

      # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å, –∫—Ç–æ –º–æ–∂–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å
      - name: Gate commenter (optional)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const assoc = context.payload.comment.author_association;
            const allowed = ['OWNER','MEMBER','COLLABORATOR'];
            if (!allowed.includes(assoc)) {
              core.info(`Skipping: association = ${assoc}`);
              core.setOutput('skip', 'true');
            }
      - name: Stop if gated
        if: steps.gate-commenter.outputs.skip == 'true'
        run: echo "Not allowed" && exit 0

      - name: Fetch GLOBAL diff (all files)
        id: globaldiff
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR=$PR_NUMBER
          curl -sSL \
            -H "Accept: application/vnd.github.v3.diff" \
            -H "Authorization: Bearer $GH_TOKEN" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${PR}" > global.diff

          MAX=350000  # ~350 KB –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          if [ $(wc -c < global.diff) -gt $MAX ]; then
            head -c $MAX global.diff > global_trimmed.diff
            mv global_trimmed.diff global.diff
            echo "TRUNCATED=true" >> $GITHUB_ENV
          else
            echo "TRUNCATED=false" >> $GITHUB_ENV
          fi

      - name: Fetch per-file patches (for inline positioning)
        id: files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR=$PR_NUMBER
          API="${{ github.api_url }}/repos/${{ github.repository }}/pulls/${PR}/files?per_page=100&page="
          page=1
          echo "[]" > files.json
          while :; do
            RESP=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "${API}${page}")
            COUNT=$(echo "$RESP" | jq 'length')
            jq -s 'add' files.json <(echo "$RESP") > tmp.json && mv tmp.json files.json
            [ "$COUNT" -lt 100 ] && break
            page=$((page+1))
          done
          jq '[ .[] | {path: .filename, status: .status, patch: .patch} | select(.patch != null) ]' files.json > patches.json
          echo "Fetched $(jq 'length' patches.json) text patches"

      - name: Build PR-wide AI suggestions (inline + general)
        id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        run: |
          GLOBAL=$(jq -Rs . < global.diff)

          SYS_PROMPT=$(cat << 'EOF'
          –¢—ã ‚Äî —Å–µ–Ω—å–æ—Ä Frontend-–∏–Ω–∂–µ–Ω–µ—Ä (React + TypeScript + React Query). –¢–µ–±–µ –¥–∞–Ω unified diff –í–°–ï–ì–û PR.
          –ù—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å:
          1) –¢–æ—á–µ—á–Ω—ã–µ –ò–ù–õ–ê–ô–ù-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Å—Ç—Ä–æ–∫–∞–º (–µ—Å–ª–∏ –º–æ–∂–µ—à—å —Ç–æ—á–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å).
          2) –û–±—â–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ PR (–∫—Ä–æ—Å—Å-—Ñ–∞–π–ª–æ–≤—ã–µ, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, CI, —Ç–µ—Å—Ç—ã –∏ –ø—Ä.).

          –§–æ—Ä–º–∞—Ç –û–¢–í–ï–¢–ê —Å—Ç—Ä–æ–≥–æ JSON:
          {
            "inline": [
              {
                "path": "relative/path/to/file.tsx",
                "match": "<–¢–û–ß–ù–û–ï —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–π –î–û–ë–ê–í–õ–ï–ù–ù–û–ô —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –≤–µ–¥—É—â–µ–≥–æ '+'>",
                "message": "<–∫—Ä–∞—Ç–∫–∏–π, –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–æ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)>",
                "severity": "nit|suggestion|warn|error"
              }
              // –Ω–µ –±–æ–ª–µ–µ 30 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ
            ],
            "general": [
              {
                "message": "<–æ–±—â–µ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ/—Ä–∏—Å–∫/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è>",
                "severity": "nit|suggestion|warn|error"
              }
              // –Ω–µ –±–æ–ª–µ–µ 15 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            ]
          }

          –ü—Ä–∞–≤–∏–ª–∞:
          - –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ('+').
          - –î–ª—è React Query —É—á–∏—Ç—ã–≤–∞–π: –∫–ª—é—á–∏, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, staleTime, select, error handling, –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏.
          - –î–ª—è React/TS: —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –º–µ–º–æ–∏–∑–∞—Ü–∏–∏, —Ç–∏–ø—ã, a11y, XSS, i18n.
          - –ù–µ –¥—É–±–ª–∏—Ä—É–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.
          - –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —Ç–æ—á–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π "general".
          EOF
          )

          REQ=$(jq -n \
            --arg model "$OPENAI_MODEL" \
            --arg sys "$SYS_PROMPT" \
            --arg content "PR unified diff:\n\n$GLOBAL" \
            '{model:$model, temperature:0.2, messages:[{role:"system",content:$sys},{role:"user",content:$content}] }')

          RESP=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer '"$OPENAI_API_KEY"'" \
            -d "$REQ" | jq -r '.choices[0].message.content')

          # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤ JSON
          if echo "$RESP" | jq type >/dev/null 2>&1; then
            echo "$RESP" > suggestions.json
          else
            echo '{"inline":[],"general":[{"message":"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.","severity":"warn"}]}' > suggestions.json
          fi

      - name: Create GitHub Review (inline) + PR comment (general)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const prNumber = Number(process.env.PR_NUMBER);
            const truncated = process.env.TRUNCATED === 'true';

            const sug = JSON.parse(fs.readFileSync('suggestions.json','utf8'));
            const patches = JSON.parse(fs.readFileSync('patches.json','utf8'));

            // path -> patch lines[]
            const patchMap = new Map();
            for (const f of patches) {
              const lines = (f.patch || '').split('\n');
              patchMap.set(f.path, lines);
            }

            // –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ '+' —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
            const findPosition = (lines, wanted) => {
              const want = String(wanted || '').trim();
              for (let i=0;i<lines.length;i++) {
                const line = lines[i];
                if (!line.startsWith('+')) continue;
                if (line.startsWith('+++')) continue; // –∑–∞–≥–æ–ª–æ–≤–æ–∫
                const added = line.slice(1).trim();
                if (added === want) return i+1; // 1-based
              }
              return null;
            };

            const inline = Array.isArray(sug.inline) ? sug.inline : [];
            const general = Array.isArray(sug.general) ? sug.general : [];

            const sevEmoji = s => ({nit:'üßπ',suggestion:'üí°',warn:'‚ö†Ô∏è',error:'üö®'})[String(s||'').toLowerCase()] || 'üí¨';

            // –°–æ–±–µ—Ä—ë–º –∏–Ω–ª–∞–π–Ω-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            const comments = [];
            for (const it of inline) {
              const path = it.path;
              const lines = patchMap.get(path);
              if (!lines) continue;
              const pos = findPosition(lines, it.match);
              if (!pos) continue;
              const body = `${sevEmoji(it.severity)} ${it.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É.'}`;
              comments.push({ path, position: pos, body });
            }

            // –û–ø—É–±–ª–∏–∫—É–µ–º –∏–Ω–ª–∞–π–Ω-—Ä–µ–≤—å—é
            if (comments.length > 0) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'COMMENT',
                body: `ü§ñ Codex inline review ‚Ä¢ ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n_Triggered by ${process.env.COMMENT_URL}_`,
                comments
              });
            }

            // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç
            let generalBody = '';
            if (general.length > 0) {
              generalBody += `### ü§ñ Codex PR-wide review (–æ–±—â–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è)\n`;
              for (const g of general) {
                generalBody += `- ${sevEmoji(g.severity)} ${g.message}\n`;
              }
              if (truncated) {
                generalBody += `\n> ‚ö†Ô∏è –î–∏—Ñ—Ñ –±—ã–ª —É—Å–µ—á—ë–Ω –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n`;
              }
              generalBody += `\n_Triggered by ${process.env.COMMENT_URL}_`;
            } else if (comments.length === 0) {
              generalBody = `ü§ñ Codex: –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç.\n_Triggered by ${process.env.COMMENT_URL}_`;
            }

            if (generalBody) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: generalBody
              });
            }

      - name: Done
        run: echo "Review posted for PR #$PR_NUMBER"
