name: Codex Comment-Triggered PR-wide Review

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    if: >
      github.event.issue.pull_request != null &&
      contains(github.event.comment.body, '/codex')
    runs-on: ubuntu-latest

    env:
      OPENAI_MODEL: gpt-4.1-mini

    steps:
      - name: –ö–æ–Ω—Ç–µ–∫—Å—Ç
        run: |
          echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "COMMENT_URL=${{ github.event.comment.html_url }}" >> $GITHUB_ENV

      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if: always()
        id: gate-commenter
        uses: actions/github-script@v7
        with:
          script: |
            const assoc = context.payload.comment.author_association;
            const allowed = ['OWNER','MEMBER','COLLABORATOR'];
            if (!allowed.includes(assoc)) {
              core.info(`–ü—Ä–æ–ø—É—Å–∫: —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ = ${assoc}`);
              core.setOutput('skip', 'true');
            }

      - name: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤
        if: steps.gate-commenter.outputs.skip == 'true'
        run: echo "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞" && exit 0

      - name: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —Ä–µ–≤—å—é
        uses: actions/github-script@v7
        with:
          script: |
            const body = [
              "ü§ñ Codex: –Ω–∞—á–∞–ª —Ä–µ–≤—å—é —ç—Ç–æ–≥–æ PR.",
              "",
              `_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ ${process.env.COMMENT_URL}_`
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.PR_NUMBER),
              body
            });

      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ diff PR
        id: globaldiff
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PR=$PR_NUMBER
          curl -sSL \
            -H "Accept: application/vnd.github.v3.diff" \
            -H "Authorization: Bearer $GH_TOKEN" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${PR}" > global.diff

          MAX=350000
          if [ $(wc -c < global.diff) -gt $MAX ]; then
            head -c $MAX global.diff > global_trimmed.diff
            mv global_trimmed.diff global.diff
            echo "TRUNCATED=true" >> $GITHUB_ENV
          else
            echo "TRUNCATED=false" >> $GITHUB_ENV
          fi

      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –ø–æ —Ñ–∞–π–ª–∞–º (–¥–ª—è inline-–∫–æ–º–º–µ–Ω—Ç–æ–≤)
        id: files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PR=$PR_NUMBER
          API="${{ github.api_url }}/repos/${{ github.repository }}/pulls/${PR}/files?per_page=100&page="
          page=1
          echo "[]" > files.json
          while :; do
            RESP=$(curl -sSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "${API}${page}")
            COUNT=$(echo "$RESP" | jq 'length')
            jq -s 'add' files.json <(echo "$RESP") > tmp.json && mv tmp.json files.json
            [ "$COUNT" -lt 100 ] && break
            page=$((page+1))
          done
          jq '[ .[] | {path: .filename, status: .status, patch: .patch} | select(.patch != null) ]' files.json > patches.json
          echo "–ü–æ–ª—É—á–µ–Ω–æ $(jq 'length' patches.json) —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–∞—Ç—á–µ–π"

      - name: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (inline + –æ–±—â–∏–µ)
        id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        run: |
          set -euo pipefail

          GLOBAL=$(jq -Rs . < global.diff)

          SYS_PROMPT=$(cat << 'EOF'
          –¢—ã ‚Äî —Å–µ–Ω—å–æ—Ä Frontend-–∏–Ω–∂–µ–Ω–µ—Ä (React + TypeScript + React Query). –í–ê–ñ–ù–û: –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º.

          –í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û JSON:
          {
            "inline": [
              {"path":"...", "match":"<–¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞>", "message":"...", "severity":"nit|suggestion|warn|error"}
            ],
            "general": [
              {"message":"...", "severity":"nit|suggestion|warn|error"}
            ]
          }
          EOF
          )

          REQ=$(jq -n \
            --arg model "$OPENAI_MODEL" \
            --arg sys "$SYS_PROMPT" \
            --arg content "PR unified diff:\n\n$GLOBAL" \
            '{model:$model, temperature:0.2, messages:[{role:"system",content:$sys},{role:"user",content:$content}] }')

          RAW=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer '"$OPENAI_API_KEY"'" \
            -d "$REQ" | jq -r '.choices[0].message.content // ""')

          printf "%s" "$RAW" > raw_model_response.txt

          CLEAN=$(printf "%s" "$RAW" | sed -E '1,/^```[a-zA-Z0-9]*$/d; /^```$/,$d' || true)
          if [ -z "$CLEAN" ]; then CLEAN="$RAW"; fi

          VALID=false
          if echo "$CLEAN" | jq -e 'type=="object"' >/dev/null 2>&1; then
            VALID=true
            echo "$CLEAN" > suggestions.json
          else
            echo '{"inline":[],"general":[{"message":"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –∏–ª–∏ null.","severity":"warn"}]}' > suggestions.json
          fi

          jq '{
                inline: ( .inline // [] | arrays ),
                general:( .general // [] | arrays )
              }' suggestions.json > suggestions.normalized.json
          mv suggestions.normalized.json suggestions.json

          echo "valid=$VALID" >> "$GITHUB_OUTPUT"
          echo "raw_file=raw_model_response.txt" >> "$GITHUB_OUTPUT"

      - name: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω)
        if: steps.ai.outputs.valid != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const prNumber = Number(process.env.PR_NUMBER);
            let raw = '';
            try { raw = fs.readFileSync('raw_model_response.txt','utf8'); } catch {}
            const preview = (raw || '').slice(0, 800);
            const body = [
              "‚ö†Ô∏è Codex: –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º JSON, –∏—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∑–∞–≥–æ—Ç–æ–≤–∫—É –±–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.",
              "",
              "–ö–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥ (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤):",
              "",
              "```",
              preview,
              "```",
              "",
              "_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ " + process.env.COMMENT_URL + "_"
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });

      - name: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≤—å—é –≤ GitHub (inline) + –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        id: publish
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            function safeParse(path, fallback) {
              try {
                const txt = fs.readFileSync(path, 'utf8').trim();
                const data = JSON.parse(txt);
                return (data && typeof data === 'object') ? data : fallback;
              } catch {
                return fallback;
              }
            }

            const prNumber = Number(process.env.PR_NUMBER);
            const truncated = process.env.TRUNCATED === 'true';

            const sug = safeParse('suggestions.json', { inline: [], general: [] });
            const inline = Array.isArray(sug.inline) ? sug.inline : [];
            const general = Array.isArray(sug.general) ? sug.general : [];

            const patches = safeParse('patches.json', []);
            const patchMap = new Map();
            for (const f of patches) {
              const lines = String(f.patch || '').split('\n');
              patchMap.set(f.path, lines);
            }

            const findPosition = (lines, wanted) => {
              const want = String(wanted || '').trim();
              for (let i=0;i<lines.length;i++) {
                const line = lines[i];
                if (!line.startsWith('+')) continue;
                if (line.startsWith('+++')) continue;
                const added = line.slice(1).trim();
                if (added === want) return i+1;
              }
              return null;
            };

            const sevEmoji = s => ({nit:'üßπ',suggestion:'üí°',warn:'‚ö†Ô∏è',error:'üö®'})[String(s||'').toLowerCase()] || 'üí¨';

            const comments = [];
            for (const it of inline) {
              const path = it.path;
              if (!path) continue;
              const lines = patchMap.get(path);
              if (!lines) continue;
              const pos = findPosition(lines, it.match);
              if (!pos) continue;
              const body = `${sevEmoji(it.severity)} ${it.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É.'}`;
              comments.push({ path, position: pos, body });
            }

            if (comments.length > 0) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'COMMENT',
                body: `ü§ñ Codex –∏–Ω–ª–∞–π–Ω-—Ä–µ–≤—å—é ‚Ä¢ ${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ ${process.env.COMMENT_URL}_`,
                comments
              });
            }

            let generalBody = '';
            if (general.length > 0) {
              generalBody += `### ü§ñ Codex –æ–±–∑–æ—Ä PR (–æ–±—â–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è)\n`;
              for (const g of general) {
                generalBody += `- ${sevEmoji(g.severity)} ${g.message}\n`;
              }
              if (truncated) {
                generalBody += `\n> ‚ö†Ô∏è –î–∏—Ñ—Ñ –±—ã–ª —É—Å–µ—á—ë–Ω –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n`;
              }
              generalBody += `\n_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ ${process.env.COMMENT_URL}_`;
            } else if (comments.length === 0) {
              generalBody = `ü§ñ Codex: –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç.\n_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ ${process.env.COMMENT_URL}_`;
            }

            if (generalBody) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: generalBody
              });
            }

            core.setOutput('inline_count', String(comments.length));
            core.setOutput('general_count', String(general.length));
            core.setOutput('truncated', truncated ? 'true' : 'false');

      - name: –ó–∞–≤–µ—Ä—à–µ–Ω–æ
        run: echo "–†–µ–≤—å—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –¥–ª—è PR #$PR_NUMBER"

      - name: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≤—å—é (—Å —Å—á—ë—Ç—á–∏–∫–æ–º + –ø–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∞)
        uses: actions/github-script@v7
        with:
          script: |
            const inlineCount = Number('${{ steps.publish.outputs.inline_count || 0 }}');
            const generalCount = Number('${{ steps.publish.outputs.general_count || 0 }}');
            const truncated = '${{ steps.publish.outputs.truncated || 'false' }}' === 'true';
            const actor = process.env.GITHUB_ACTOR || '${{ github.actor }}';

            const parts = [
              `ü§ñ Codex: —Ä–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ`,
              ``,
              `–ò—Ç–æ–≥: ${inlineCount} –∏–Ω–ª–∞–π–Ω, ${generalCount} –æ–±—â–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π.` + (truncated ? `\n> ‚ö†Ô∏è –î–∏—Ñ—Ñ –±—ã–ª —É—Å–µ—á—ë–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.` : ''),
              ``,
              `–ó–∞–ø—É—Å—Ç–∏–ª: @${actor}`,
              ``,
              `_–ó–∞–ø—É—â–µ–Ω–æ –∏–∑ ${process.env.COMMENT_URL}_`
            ];

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.PR_NUMBER),
              body: parts.join("\n")
            });
